{"version":3,"sources":["LineNames.js","lib/getBounds.js","lib/fns/compose.js","displayLines/displayHoverAbscissa.js","lib/fns/map.js","displayLines/tooltip.js","lib/formatDate.js","displayLines/displayLines.js","displayLines/index.js","Chart/chart.js","Chart/index.js","chartSelector/index.js","App.js","serviceWorker.js","index.js"],"names":["LineNames","_ref","colors","names","enabled","onSwitch","onChange","evt","_evt$currentTarget","currentTarget","checked","name","state","concat","filter","_name","isChecked","includes","react_default","a","createElement","Object","entries","map","_ref2","_ref3","slicedToArray","key","className","style","color","type","getBounds","numbers","reduce","boundReducer","Infinity","number","min","max","Math","compose","_len","arguments","length","fns","Array","_key","reduceRight","args","fn","apply","DisplayHoverAbscissa","x","height","xLabel","dots","d","ry","stroke","y","cx","cy","rx","fill","tooltip","transform","value","Date","getFullYear","getMonth","toString","padStart","getDate","formatDate","renderDots","index","Label","assign","array","_ref4","valueOf","event","parseInt","target","getPathBuilder","xStep","yMin","yMax","_y","toArray","base","slice","_ref6","DisplayLines","dataSets","get","_getBounds","all","_getBounds2","timelineRef","React","createRef","_useState","useState","_useState2","setTooltip","_useState3","_useState4","rightBound","setRightBound","_useState5","_useState6","leftBound","setLeftBound","_useState7","undefined","_useState8","width","setWidth","pathBuilder","onChangeRightBound","onChangeLeftBound","useLayoutEffect","window","getComputedStyle","current","cursor","onMouseMove","e","clientX","xCursor","position","positionName","src_displayLines_tooltip","viewBox","preserveAspectRatio","_ref5","strokeWidth","displayHoverAbscissa","ref","createLinesMap","valueMap","values","set","Chart","accessor","active","chart","setChart","columns","keys","changeEnabled","useEffect","Map","Fragment","src_displayLines","itemRender","props","displayChartSelector","chartNames","itemProps","handler","children","onClick","item","app","data","setActive","chartNameBuilder","chartSelector","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.278ac972.chunk.js","sourcesContent":["import React from 'react';\n\nexport default LineNames;\n\nfunction LineNames ({colors, names, enabled, onSwitch}) {\n  const onChange = evt => {\n    const {\n            checked,\n            name,\n          } = evt.currentTarget;\n    onSwitch((state) => checked ? state.concat(name) : state.filter(_name => _name !== name));\n  };\n  const isChecked = name => enabled.includes(name) ? 'checked' : '';\n\n  return (\n    <div>\n      {\n        Object.entries(names).map(([key, name]) => {\n          return (\n            <label className=\"line-names\" style={{color: colors[key]}} key={key}>\n              {name}\n              <input checked={isChecked(key)} type=\"checkbox\" name={key} onChange={onChange} />\n            </label>\n          )\n        })\n      }\n    </div>\n  )\n}\n","export default getBounds;\n\n/**\n *\n * @param {[number]} numbers\n */\nfunction getBounds (numbers) {\n  return numbers.reduce(boundReducer, [Infinity, -Infinity])\n}\n\nfunction boundReducer ([min, max], number) {\n  return [Math.min(min, number), Math.max(max, number)];\n}\n","export default function compose (...fns) {\n  return function () {\n    return fns.reduceRight((args, fn) => [fn.apply(fn, args)], arguments);\n  }\n}\n","import React from 'react';\n\nexport default DisplayHoverAbscissa;\n\n/**\n * @todo Scale not very nice\n * @param x\n * @param xLabel\n * @param height\n * @param dots\n * @return {*}\n * @constructor\n */\nfunction DisplayHoverAbscissa ({x, xLabel, height, dots}) {\n  const d = `M ${x},0 V ${height}`;\n  const ry = height / 100;\n\n  return (\n    <g>\n      <path d={d} stroke=\"lightgrey\"/>\n      {\n        dots.map(([name, stroke, y]) => (\n          <ellipse key={name} stroke={stroke} cx={x} cy={y} rx=\"3\" ry={ry} fill=\"white\"/>\n        ))\n      }\n    </g>\n  );\n}\n\n","export default function (fn) {\n  return function (array) {\n    return array.map(fn);\n  }\n}\n","import React from \"react\";\nimport './tooltip.css';\nimport formatDate from \"../lib/formatDate\";\nimport map from '../lib/fns/map';\n\nexport default tooltip;\n\nconst renderDots = map(renderLabel);\n\n/**\n * @todo Add callback on mount to check and modify transform in case parentNode.clientWidth < parentNode.scrollWidth\n * @param xLabel\n * @param x\n * @param dots\n * @return {*}\n */\nfunction tooltip ({xLabel, x, dots}) {\n  if (!xLabel) return null;\n\n  return (\n    <div className=\"tooltip\" style={{transform: `translateX(${x + 10}px)`}}>\n      <h1>\n        {formatDate(xLabel)}\n      </h1>\n\n      <div className=\"tooltip-values\">\n        {renderDots(dots)}\n      </div>\n    </div>\n  )\n}\n\nfunction renderLabel ([name, color, value], index) {\n  return <Label key={index} {...{name, color, value}}/>;\n}\n\nfunction Label ({name, color, value}) {\n  return (\n    <div style={{color}}>\n      {value}\n      <small>\n        {name}\n      </small>\n    </div>\n  );\n}\n","export default function formatDate (value) {\n  const d = new Date(value);\n\n  return `${d.getFullYear()}-${(d.getMonth() + 1).toString().padStart(2, '0')}-${d.getDate().toString().padStart(2, '0')}`\n}\n","import React, {\n  useLayoutEffect,\n  useState,\n} from 'react';\nimport getBounds from \"../lib/getBounds\";\nimport compose from \"../lib/fns/compose\";\nimport DisplayHoverAbscissa from \"./displayHoverAbscissa\";\nimport Tooltip from './tooltip';\n\nconst valueOf = event => parseInt(event.target.value);\n\nexport default displayLines;\n\nfunction displayLines ({dataSets, enabled, colors}) {\n  const x = dataSets.get('x');\n  const [yMin, yMax] = getBounds(enabled.reduce((all, name) => all.concat(dataSets.get(name)), []));\n  const timelineRef = React.createRef();\n\n  const [tooltip, setTooltip] = useState(null);\n\n  const [rightBound, setRightBound] = useState(x.length);\n  const [leftBound, setLeftBound] = useState(x.length - 20);\n\n  const [width, setWidth] = useState(undefined);\n\n  const pathBuilder = getPathBuilder(width / x.length, yMin, yMax);\n\n  const onChangeRightBound = compose(setRightBound, valueOf);\n  const onChangeLeftBound = compose(setLeftBound, valueOf);\n  const onChangeCursor = e => {\n    const value = valueOf(e);\n\n    setLeftBound(value);\n    setRightBound(value + rightBound - leftBound);\n  };\n\n  useLayoutEffect(() => {\n    setWidth(parseInt(window.getComputedStyle(timelineRef.current).width));\n  }, []);\n\n  const showDots = e => {\n    const {\n      clientX,\n    } = e;\n    const xCursor = x.slice(leftBound, rightBound + 1);\n    const xStep = width / xCursor.length;\n    const position = parseInt(clientX / xStep);\n    const positionName = xCursor[position];\n    const height = yMax - yMin;\n\n    setTooltip({\n      height,\n      clientX,\n      x:      position * xStep,\n      xLabel: positionName,\n      dots:   cursor.map(([name, stroke, y]) => [name, stroke, yMax - y[position]]),\n    });\n  };\n\n  const cursor = enabled.map(name => {\n    const y = dataSets.get(name).slice(leftBound, rightBound + 1);\n    const stroke = colors[name];\n    const pathBuilder = getPathBuilder(width / y.length, yMin, yMax);\n\n    return [name, stroke, y, pathBuilder(y)];\n  });\n\n  return (\n    <div className=\"chart-view\">\n      <div className=\"large-view\" onMouseMove={showDots}>\n        <Tooltip {...tooltip} />\n\n        {\n          width && enabled.length > 0 && (\n            <svg viewBox={`0 0 ${width} ${yMax - yMin}`} preserveAspectRatio=\"none\">\n              {\n                cursor.map(([name, stroke, y, d]) => {\n//                  const y = dataSets.get(name).slice(leftBound).slice(0, rightBound-leftBound);\n                  return (\n                    <path key={name} d={d} fill=\"none\" strokeWidth={2} stroke={stroke}/>\n                  )\n                })\n              }\n\n              {tooltip && <DisplayHoverAbscissa {...tooltip} />}\n            </svg>\n          )\n        }\n      </div>\n\n      <div className=\"timeline-view\" ref={timelineRef}>\n        <input type=\"range\" name=\"leftBound\" min={0} max={-10 + rightBound} value={leftBound}\n               onChange={onChangeLeftBound}/>\n        <input type=\"range\" name=\"cursor\" min={0} max={x.length - (rightBound - leftBound)} value={leftBound}\n               onChange={onChangeCursor}/>\n        <input type=\"range\" name=\"rightBound\" min={10 + leftBound} max={x.length} value={rightBound}\n               onChange={onChangeRightBound}/>\n        {\n          width && enabled.length > 0 && (\n            <svg viewBox={`0 0 ${width} ${yMax - yMin}`} preserveAspectRatio=\"none\">\n              {\n                enabled.map(name => {\n                  const y = dataSets.get(name);\n                  const stroke = colors[name];\n\n                  return (\n                    <path key={name} d={pathBuilder(y)} fill=\"none\" stroke={stroke}/>\n                  )\n                })\n              }\n            </svg>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nfunction getPathBuilder (xStep, yMin, yMax) {\n  return pathBuilder;\n\n  /**\n   *\n   * @param {[number]} y ordinates\n   * @return {string} path definition\n   */\n  function pathBuilder (y) {\n    const [base, ...rest] = y;\n\n    const {d} = rest.reduce(({base, d}, y) => {\n      return {\n        base: y,\n        d:    `${d} l ${xStep},${base - y}`,\n      }\n    }, {base, d: `M 0,${yMax - base}`});\n\n    return d;\n  }\n}\n","import DisplayLines from './displayLines';\n\nexport default DisplayLines;\n","import React, {\n  useEffect,\n  useState,\n} from \"react\";\nimport LineNames from \"../LineNames\";\nimport DisplayLines from '../displayLines';\n\nconst createLinesMap = (valueMap, [name, ...values]) => valueMap.set(name, values);\n\nexport default chart;\n\nfunction chart ({accessor, active}) {\n  const [chart, setChart] = useState(accessor());\n\n  const {columns, names, /*types, */colors} = chart;\n\n  const [enabled, changeEnabled] = useState(Object.keys(names));\n\n  useEffect(() => {\n    const chart = accessor();\n\n    setChart(chart);\n    changeEnabled(() => Object.keys(chart.names));\n  }, [active]);\n\n  const dataSets = columns.reduce(createLinesMap, new Map());\n\n  return (\n    <>\n      <DisplayLines dataSets={dataSets} enabled={enabled} colors={colors}/>\n      <LineNames colors={colors} enabled={enabled} names={names} onSwitch={changeEnabled}/>\n    </>\n  );\n}\n","import Chart from './chart'\n\nexport default Chart;\n","import React from \"react\";\nimport compose from \"../lib/fns/compose\";\n\nconst itemRender = props => <button {...props}/>;\n\nexport default displayChartSelector;\n\nfunction displayChartSelector ({chartNames, onChange}) {\n  const itemProps = switcherProps(onChange);\n  const item = compose(itemRender, itemProps);\n\n  return chartNames.map(item);\n}\n\nfunction switcherProps (handler) {\n  return function (name, index) {\n    return {\n      key: index,\n      children: name,\n      onClick () {\n        handler(index)\n      },\n    }\n  }\n}\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport Chart from './Chart';\nimport ChartSelector from './chartSelector';\n\nexport default app;\n\nconst chartNameBuilder = (chart, index) => `Chart #${index}`;\n\nfunction app ({data}) {\n  const [active, setActive] = useState(0);\n  const names = data.map(chartNameBuilder);\n  const accessor = () => data[active];\n\n  return (\n    <div className=\"App\">\n      <ChartSelector chartNames={names} onChange={setActive}/>\n\n      <Chart accessor={accessor} active={active}/>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport data                 from './mocks/chart_data';\n\nReactDOM.render(<App data={data}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}